#!/usr/bin/env bash

# FTP Deployment script
# =====================
#
# Deploys on a FTP server and execute `post-deploy` script using [WebConsole].
#
# Usage
# -----
#
#     scripts/deploy [staging|production]
#
# Requirements
# ------------
#
# - [WebConsole] installed on server
# - [webconsole-cli] installed globally: `composer global require webconsole-cli`
# - Environment variables (<ENV> represents either "STAGING" or "PRODUCTION") set:
#   - `<ENV>_FTP_USERNAME`: FTP username
#   - `<ENV>_FTP_PASSWORD`: FTP password
#   - `<ENV>_FTP_HOST`:
#   - `<ENV>_FTP_PATH`:
#   - `<ENV>_SSH_USERNAME`: WebConsole username
#   - `<ENV>_SSH_PASSWORD`: WebConsole password
#   - `<ENV>_SSH_URL`: WebConsole URL
#
# [WebConsole]: http://web-console.org/
# [webconsole-cli]: https://github.com/amercier/webconsole-cli

set -o errexit
set -o pipefail
set -o nounset

# Uppercase stdin to stdout
uppercase() {
    tr '[:lower:]' '[:upper:]'
}

# Get an environment variable for a given deployment environment.
# @param 1 Environment. Ex: staging
# @param 2 Variable. Ex: FTP_PASSWORD
# @returns $<ENV>_<VARIABLE>. Ex: $(getenv $1 FTP_PASSWOR)D
getenv() {
    name="$(echo "${1}_${2}" | uppercase)"
    value="${!name-}"
    if [ "$value" = "" ]
    then
        echo "Error: variable $name is not set." >&2
        return 1
    fi
    echo "$value"
}

# Execute a command remotely
execute_remotely() {
    webconsole -u "$ssh_username" -p "$ssh_password" -P "$ftp_path" "$ssh_url" "$@"
}

# Check whether files exist remotely
files_exist_remotely() {
    if [ "$(execute_remotely "find $* -maxdepth 0 2>/dev/null | wc -l")" = "$#" ]; then
        return 0;
    else
        return 1;
    fi
}

# Check argument
if [ "$#" != 1 ] || [ "$1" != "staging" ] && [ "$1" != "production" ]
then
    echo "Usage: scripts/deploy [staging|production]" >&2
    exit 1
fi

# Disallow robots on staging
if [ "$1" = staging ]
then
    sed -i'' 's/Disallow:$/Disallow: \//' public/robots.txt
fi

# Retrieve environment variables
ftp_username="$(getenv "$1" FTP_USERNAME)" || exit 1
ftp_password="$(getenv "$1" FTP_PASSWORD)" || exit 1
ftp_host="$(getenv "$1" FTP_HOST)" || exit 1
ftp_path="$(getenv "$1" FTP_PATH)" || exit 1
ssh_username="$(getenv "$1" SSH_USERNAME)" || exit 1
ssh_password="$(getenv "$1" SSH_PASSWORD)" || exit 1
ssh_url="$(getenv "$1" SSH_URL)"

# 1. Maintenace mode ON
if files_exist_remotely artisan vendor; then
    maintenance=true
else
    maintenance=false
fi
if [ "$maintenance" = true ]; then
    echo Turning maintenance mode ON...
    execute_remotely "php artisan down --no-interaction --message=\"Upgrading Website\" --retry=30"
fi

# 2. Deploy
if [ -f "deploy-$1.ini" ]; then
    echo "Found deploy-$1.ini"
else
    echo "Generating deploy-$1.ini..."
    echo "
        [server]

        scheme = sftp
        skip = false
        user = $ftp_username
        pass = $ftp_password
        host = $ftp_host
        port = 22
        path = /home/$ftp_username/$ftp_path
        passive = true
        upload_untracked[] = public
    " | sed 's/^ *//g' > "$1.ini"
fi
echo "Deploying using deploy-$1.ini..."
composer deploy -- "$1"

# 3. Install or upgrade Composer
if files_exist_remotely composer.phar; then
    echo Composer is already installed, running self-upgrade...
    execute_remotely php composer.phar self-update
else
    echo Could not find composer.phar, downloading...
    execute_remotely "curl -s https://getcomposer.org/installer | php"
fi

# 4. Project setup
execute_remotely php composer.phar --no-interaction install --no-dev
execute_remotely php composer.phar --no-interaction migrate
execute_remotely php composer.phar --no-interaction optimize

# 5. Maintenance mode OFF
if [ "$maintenance" = true ]; then
    echo Turning maintenance mode OFF...
    execute_remotely php artisan up
fi
